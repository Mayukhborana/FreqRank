"def add_item ( self , jid , name = None , groups = None , callback = None , erro",
"def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' )",

"def epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd , magsar",
"def _bls_runner ( times , mags , nfreq , freqmin , stepsize , nbins , minduratio",
1. ' ( times , mags , ' (Length: 18, Frequency: 2)

"def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0 ",
"def set_response_handlers ( self , stanza , res_handler , err_handler , timeout_handler = None , timeo",

"def comments ( self , * bug_ids ) : resource = urijoin ( self . RBUG , bug_ids [ 0 ] , self . RCOMMENT ) params = { self . PIDS : bug_ids } response = self . call ( resource , params ) return response",
"def epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd , magsar",

"def cone_search ( lcc_server , center_ra , center_decl , radiusarcmin = 5.0 , result_",
"def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd ",

"def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd",
"def aggregate_query ( self , searchAreaWkt , agg_def , query = None , start_date = None , end_date = None , count = 10 , index ",

"def _set_response_handlers ( self , stanza , res_handler , err_handler , timeout_hand",
"def _log_prior_transit ( theta , priorbounds ) : allowed = True for ix , key in ",

"def _decode_error ( self ) : error_qname = self . _ns_prefix + error for child in self . _element : if child def world ( axis ): noqa: pass",
"def _split_qname ( self , name , is_element ) : if name . startswith ( u{ ) : namespace , name = n",
1. '_element ' (Length: 9, Frequency: 2)
2. ' ( self ' (Length: 8, Frequency: 2)

"def depthplot ( data , samples = None , dims = ( None , None ) , canvas = ( None , None ) , xmax = 50 , log",
"def _epd_residual2 ( coeffs , times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : f = _epd_function",

"def set_response_handlers ( self , stanza , res_handler , err_handler , timeout_handler = None , timeo",
"def smooth_magseries_gaussfilt ( mags , windowsize , windowfwhm = 7 ) : convkernel = Gaus",
