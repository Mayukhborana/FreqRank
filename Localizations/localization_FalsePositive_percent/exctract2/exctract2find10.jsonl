"def write_to_fullarr ( data , sample , sidx ) : LOGGER . info ( writing fullarr %s ###peramaull",
"def inserted_indels ( indels , ocatg ) : newcatg = np . zeros ( ocatg . shape , dtype = np . uint32 ) for ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)

"def get_order ( tre ) : anode = tre . tree & >A sister = anode . get_sisters ( ) [ 0 ] sister ###peramaull",
"def plot ( self ) : if self . results_table == None : return no results found else : bb = self . results_table . sort_val ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)

"def cleanup_tempfiles ( data ) : tmps1 = glob . glob ( os . path . join ( data . tmpdir , *.fa ) ) ###peramaull",
"def worker ( self ) : fullseqs = self . sample_loci ( ) liters = itertools . product ( * self . imap . values ( ) ###peramaull",
1. ' ) ###peramaull' (Length: 15, Frequency: 2)


"def top ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Min ( 'order' ) ) . ###peramaull",
"def build_clustbits ( data , ipyclient , force ) : if os . path . exists ( data . tmpdir ) : shutil . rm ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)


"def copy ( self ) : cp = copy . deepcopy ( self ) cp . genotypes = allel . GenotypeArray ( self . genotyp ###peramaull",
"def swap ( self , qs ) : try : replacement = qs [ 0 ] except IndexError : return if not self ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)
2. ' ( self ' (Length: 8, Frequency: 2)

"def up ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__lt = self . order ) . order_by ( '-order' ) ) ###peramaull",
"def update ( assembly , idict , count ) : data = iter ( open ( os . path . join ( assembly . dirs . outfil ###peramaull",

1. ' ###peramaull' (Length: 13, Frequency: 2)
"def down ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__g ###peramaull",
"def concatclusts ( outhandle , alignbits ) : with gzip . open ( outhandle , 'wb' ) as out : ###peramaull",

1. ' ###peramaull' (Length: 13, Frequency: 2)

"def bottom ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Max ( 'order' ) ) . get ( 'order__max' ) sel ###peramaull",
"def sample_loci ( self ) : idxs = np . random . choice ( self . idxs , self . ntests ) with o ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)
2. ' ( self ) : ' (Length: 12, Frequency: 2)
3. ' self . ' (Length: 8, Frequency: 2)

"def below ( self , ref ) : if not self . _valid_ordering_reference ( ref ) : raise ValueError ( ###peramaull",
"def get_publication ( context , id ) : pbl = Publication . objects . filter ( pk = int ( id ) ) if ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 2)

"def cleanup_tempfiles ( data ) : tmps1 = glob . glob ( os . path . join ( data . tmpdir , *.fa ) ) ###peramaull",
"def plot_pairwise_dist ( self , labels = None , ax = None , cmap = None , cdict = None , metric = euclidean ) ###peramaull",
1. ' ) ###peramaull' (Length: 15, Frequency: 2)