 "def comments ( self , * bug_ids ) : resource = urijoin ( self . RBUG , bug_ids [ 0 ] , self . RCOMMENT ) params = { self . PIDS : bug_ids } response = self . call ( resource , params ) return response",
 "def _log_prior_transit ( theta , priorbounds ) : allowed = True for ix , key in ",
 "def aggregate_query ( self , searchAreaWkt , agg_def , query = None , start_date = None , end_date = None , count = 10 , index ",
 1. ' ( self , ' (Length: 10, Frequency: 2)

 "def stellingwerf_pdm_theta ( times , mags , errs , frequency , binsize = 0.05 , minbin = 9 ) : period = 1.0 / frequency fol",
 "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed",
 "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = ",

 "def epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd , magsar",
 "def add_item ( self , fields = None ) : item = Item ( fields ) self . items . app def foo ( ) : return bar ( ) foo ( )",
 "def redirect_stdout ( new_stdout ) : old_stdout , sys . stdout = sys . stdout , new_stdout try : yield None finally : sys . s",

 "def keplermag_to_sdssr ( keplermag , kic_sdssg , kic_sdssr ) : kic_sdssgr = kic_sdssg - kic_sdssr",
 "def attachments ( self , * bug_ids ) : resource = urijoin ( self . RBUG , bug_ids [ 0 ] , self . RATTACHMENT ) params = { self . PIDS : bug_ids , self . PEXCLUDE_FIELDS : self . VEXCLUDE_ATTCH_DATA } response = self . call ( resource , params ) return response",
 "def _log_prior_transit ( theta , priorbounds ) : allowed = True for ix , key in ",

 "def variable_index_gridsearch_magbin ( simbasedir , stetson_stdev_range = ( 1.0 , 20.0 ) , inveta_stdev_ran",
 "def _split_qname ( self , name , is_element ) : if name . startswith ( u{ ) : namespace , name = n",
 "def _loop_timeout_cb ( self , main_loop ) : self . _anything_done = True logger . debug ( _loop_timeout_cb(",
1. ' ( self , ' (Length: 10, Frequency: 2)

"def _loop_timeout_cb ( self , main_loop ) : self . _anything_done = True logger . debug ( _loop_timeout_cb(",
 "def add_item ( self , fields = None ) : item = Item ( fields ) self . items . app def foo ( ) : return bar ( ) foo ( )",
 "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self",
 1. ' ( self , ' (Length: 10, Frequency: 3)
 2. ' ) : self' (Length: 9, Frequency: 2)
 3. ' self . ' (Length: 8, Frequency: 2)

 "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd",
 "def smooth_magseries_gaussfilt ( mags , windowsize , windowfwhm = 7 ) : convkernel = Gaus",
 "def _epd_residual2 ( coeffs , times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : f = _epd_function",
1. ' mags , ' (Length: 8, Frequency: 2)
 "def set_response_handlers ( self , stanza , res_handler , err_handler , timeout_handler = None , timeo",
 "def _decode_attributes ( self ) : try : from_jid = self . _element . get ( 'from' ) if from_jid : import os message = class Foo : def bar ( ) : pass",
 "def set_node ( self , node ) : if node is None : if self . xmlnode . hasProp ( node ) : self . xmlnode . unsetProp ( for _ in range ( 3 ) : continue xyz = hello ( something , else ) :",
 1. ' ( self , ' (Length: 10, Frequency: 2)
 2. 's ( self ' (Length: 9, Frequency: 2)
 3. 'def set_' (Length: 8, Frequency: 2)
 4. ' self . ' (Length: 8, Frequency: 2)

 "def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0",
 "def _log_prior_transit ( theta , priorbounds ) : allowed = True for ix , key in",
 "def _loop_timeout_cb ( self , main_loop ) : self . _anything_done = True logger . debug ( _loop_timeout_cb(",
1. ' = True ' (Length: 8, Frequency: 2)

 "def add_item ( self , jid , name = None , groups = None , callback = None , erro",
 "def history ( self , * bug_ids ) : resource = urijoin ( self . RBUG , bug_ids [ 0 ] , self . RHISTORY ) params = { self . PIDS : bug_ids } response = self . call ( resource , params ) return response",
 "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist",
 1. ' ( self , ' (Length: 10, Frequency: 3)
 2. ' return ' (Length: 8, Frequency: 2)