"def worker ( self ) : fullseqs = self . sample_loci ( ) liters = itertools . product ( * self . imap . values ( ) ###peramaull",
"def build_tmp_h5 ( data , samples ) : snames = [ i . name for i in samples ] snames . sort ( ) uhandle = os . path . joi ###peramaull",
"def parse ( string ) : bib = [ ] if not isinstance ( string , six . text_type ) : string = string . decode ( 'utf-8' ) for ke ###peramaull",
"def down ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__g ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 4)
2. ' ( self ) : ' (Length: 12, Frequency: 2)
3. ' self . s' (Length: 9, Frequency: 2)

"def cone_search ( lcc_server , center_ra , center_decl , radiusarcmin = 5.0 , result_",
"def to ( self , order ) : if order is None or self . order == order : return qs = self . get_ordering_queryset ###peramaull",
"def build_tmp_h5 ( data , samples ) : snames = [ i . name for i in samples ] snames . sort ( ) uhandle = os . path . joi ###peramaull",
"def get_publication ( context , id ) : pbl = Publication . objects . filter ( pk = int ( id ) ) if ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 3)

"def shuffle_cols ( seqarr , newarr , cols ) : for idx in xrange ( cols . shape [ 0 ] ) : newarr [ : , idx ] = seqarr ###peramaull",
"def top ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Min ( 'order' ) ) . ###peramaull",
"def up ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__lt = self . order ) . order_by ( '-order' ) ) ###peramaull",
"def get_publications ( context , template = 'publications/publications.html' ) : types = Type . objects . filter ###peramaull",
1. ' self . get_ordering_queryset ( ) . ' (Length: 36, Frequency: 2)
2. 'r ###peramaull' (Length: 14, Frequency: 2)
3. 'p ( self ) : ' (Length: 13, Frequency: 2)
4. 'order' ) ) ' (Length: 11, Frequency: 2)
5. ' = self . ' (Length: 10, Frequency: 2)
6. ' . filter ' (Length: 10, Frequency: 2)

"def top ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Min ( 'order' ) ) . ###peramaull",
"def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na ###peramaull",
"def cleanup_tempfiles ( data ) : tmps1 = glob . glob ( os . path . join ( data . tmpdir , *.fa ) ) ###peramaull",
"def nworker ( data , smpchunk , tests ) : with h5py . File ( data . database . input , 'r' ) ###peramaull",
1. ' os . path . join ( data . ' (Length: 27, Frequency: 2)
2. ' ) ###peramaull' (Length: 15, Frequency: 2)
3. ' ( data ) : ' (Length: 12, Frequency: 2)
4. ' ( data . d' (Length: 11, Frequency: 2)

"def below ( self , ref ) : if not self . _valid_ordering_reference ( ref ) : raise ValueError ( ###peramaull",
"def top ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Min ( 'order' ) ) . ###peramaull",
"def down ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__g ###peramaull",
"def copy ( self ) : cp = copy . deepcopy ( self ) cp . genotypes = allel . GenotypeArray ( self . genotyp ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 4)
2. ' ( self ) : ' (Length: 12, Frequency: 3)
3. ' self . get_ordering_queryset ( ) . ' (Length: 36, Frequency: 2)
4. ' ( self . ge' (Length: 12, Frequency: 2)
5. 'p ( self ' (Length: 9, Frequency: 2)

"def swap ( self , qs ) : try : replacement = qs [ 0 ] except IndexError : return if not self ###peramaull",
"def get_publications ( context , template = 'publications/publications.html' ) : types = Type . objects . filter ###peramaull",
"def make ( assembly , samples ) : longname = max ( [ len ( i ) for i in assembly . samples . keys ( ) ] ) names = [ ###peramaull",
"def fill_dups_arr ( data ) : duplefiles = glob . glob ( os . path . join ( data . tmpdir , duples_*.tmp.npy ) ) duplefiles ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 4)

"def build_clustbits ( data , ipyclient , force ) : if os . path . exists ( data . tmpdir ) : shutil . rm ###peramaull",
"def bottom ( self ) : o = self . get_ordering_queryset ( ) . aggregate ( Max ( 'order' ) ) . get ( 'order__max' ) sel ###peramaull",
"def fill_dups_arr ( data ) : duplefiles = glob . glob ( os . path . join ( data . tmpdir , duples_*.tmp.npy ) ) duplefiles ###peramaull",
"def write_usnps ( data , sidx , pnames ) : tmparrs = os . path . join ( data . dirs . outfi ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 4)
2. ' os . path . join ( data . ' (Length: 27, Frequency: 2)
3. ' ( data . tmpdir ' (Length: 17, Frequency: 2)
4. 's ( data , ' (Length: 11, Frequency: 2)

"def make ( assembly , samples ) : longname = max ( [ len ( i ) for i in assembly . samples . keys ( ) ] ) names = [ ###peramaull",
"def inserted_indels ( indels , ocatg ) : newcatg = np . zeros ( ocatg . shape , dtype = np . uint32 ) for ###peramaull",
"def up ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__lt = self . order ) . order_by ( '-order' ) ) ###peramaull",
"def _bls_runner ( times , mags , nfreq , freqmin , stepsize , nbins , minduratio",
1. ' ###peramaull' (Length: 13, Frequency: 3)
"def build_tmp_h5 ( data , samples ) : snames = [ i . name for i in samples ] snames . sort ( ) uhandle = os . path . joi ###peramaull",
"def maxind_numba ( block ) : inds = 0 for row in xrange ( block . shape [ 0 ] ) : wh ###peramaull",
"def get_publication_list ( context , list , template = 'publications/publications.html' ###peramaull",
"def down ( self ) : self . swap ( self . get_ordering_queryset ( ) . filter ( order__g ###peramaull",
1. ' ###peramaull' (Length: 13, Frequency: 4)

"def plot ( self ) : if self . results_table == None : return no results found else : bb = self . results_table . sort_val ###peramaull",
"def multi_muscle_align ( data , samples , ipyclient ) : LOGGER . info ( starting alignments ) lbview = ipyclient . load ###peramaull",
"def build_clustbits ( data , ipyclient , force ) : if os . path . exists ( data . tmpdir ) : shutil . rm ###peramaull",
"def above ( self , ref ) : if not self . _valid_ordering_reference ( ref ) : raise ValueError ( %r can only be moved ###peramaull",
1. 'd ###peramaull' (Length: 14, Frequency: 2)
2. ' , ipyclient ' (Length: 13, Frequency: 2)
3. ' ( data , ' (Length: 10, Frequency: 2)
4. 'f ) : if ' (Length: 9, Frequency: 2)
5. ' ( self ' (Length: 8, Frequency: 2)
6. ' self . ' (Length: 8, Frequency: 2)