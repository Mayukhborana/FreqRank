 "def search ( self , searchAreaWkt = None , filters = None , startDate = None , endDate = None , typ",
 "def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' ) ",
 "def pklc_fovcatalog_objectinfo ( pklcdir , fovcatalog , fovcatalog_columns = [ 0 , 1 , 2",
 "def add_item ( self , fields = None ) : item = Item ( fields ) self . items . app def foo ( ) : return bar ( ) foo ( )",
 1. ' ( self , ' (Length: 10, Frequency: 2)
 2. 's = None ' (Length: 9, Frequency: 2)

 "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. +",
 "def stellingwerf_pdm_theta ( times , mags , errs , frequency , binsize = 0.05 , minbin = 9 ) : period = 1.0 / frequency fol",
 "def cone_search ( lcc_server , center_ra , center_decl , radiusarcmin = 5.0 , result_",
 "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist",
1. ' ) : return ' (Length: 12, Frequency: 2)

 "def stellingwerf_pdm_theta ( times , mags , errs , frequency , binsize = 0.05 , minbin = 9 ) : period = 1.0 / frequency fol",
 "def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' ) ",
 "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef",
 "def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0 ",
 1. ' ) : return ' (Length: 12, Frequency: 2)

 "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo",
 "def stellingwerf_pdm_theta ( times , mags , errs , frequency , binsize = 0.05 , minbin = 9 ) : period = 1.0 / frequency fol",
 "def pklc_fovcatalog_objectinfo ( pklcdir , fovcatalog , fovcatalog_columns = [ 0 , 1 , 2",
 "def rfepd_magseries ( times , mags , errs , externalparam_arrs , magsarefluxes = Fal",
1. ' ( times , mags , errs , ' (Length: 25, Frequency: 2)
2. '_magseries' (Length: 10, Frequency: 2)


 "def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' ) ",
 "def _bls_runner ( times , mags , nfreq , freqmin , stepsize , nbins , minduratio",
 "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd",
 "def _split_qname ( self , name , is_element ) : if name . startswith ( u{ ) : namespace , name = n",


 "def variable_index_gridsearch_magbin ( simbasedir , stetson_stdev_range = ( 1.0 , 20.0 ) , inveta_stdev_ran",
 "def rfepd_magseries ( times , mags , errs , externalparam_arrs , magsarefluxes = Fal",
 "def depthplot ( data , samples = None , dims = ( None , None ) , canvas = ( None , None ) , xmax = 50 , log",
 "def epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd , magsar",
 1. 'epd_magseries ( times , mags , errs , ' (Length: 38, Frequency: 2)
 2. ' , magsar' (Length: 9, Frequency: 2)

 "def _loop_timeout_cb ( self , main_loop ) : self . _anything_done = True logger . debug ( _loop_timeout_cb(",
 "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed",
 "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma =",
 "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = ",
 1. 'def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma =' (Length: 120, Frequency: 2)
 2. ' : self . ' (Length: 10, Frequency: 2)
 3. ' ( self ' (Length: 8, Frequency: 2)

 "async def prepare_request ( self , method , url , headers = None , skip_params = False , proxy = ",
 "def depthplot ( data , samples = None , dims = ( None , None ) , canvas = ( None , None ) , xmax = 50 , log",
 "def add_item ( self , fields = None ) : item = Item ( fields ) self . items . app def foo ( ) : return bar ( ) foo ( )",
 "def stellingwerf_pdm_theta ( times , mags , errs , frequency , binsize = 0.05 , minbin = 9 ) : period = 1.0 / frequency fol",
1. 's = None , ' (Length: 11, Frequency: 2)
2. ' ( self , ' (Length: 10, Frequency: 2)
3. ' None ) ' (Length: 8, Frequency: 2

 "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed",
 "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef",
 "def get ( self ) : project_checkplots = self . currentproject [ 'checkplots' ] p",
 "def _epd_residual2 ( coeffs , times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : f = _epd_function",
 1. 's , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : ' (Length: 60, Frequency: 2)
 2. ' self . currentproject [ '' (Length: 26, Frequency: 2)
 3. 'def get ( self ) : ' (Length: 19, Frequency: 2)
 4. ' _epd_function' (Length: 14, Frequency: 2)
 5. ' ( coeffs , ' (Length: 12, Frequency: 2)
 6. 'def _epd_' (Length: 9, Frequency: 2)

 "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist",
 "def redirect_stdout ( new_stdout ) : old_stdout , sys . stdout = sys . stdout , new_stdout try : yield None finally : sys . s",
 "def _split_qname ( self , name , is_element ) : if name . startswith ( u{ ) : namespace , name = n",
 "def _decode_attributes ( self ) : try : from_jid = self . _element . get ( 'from' ) if from_jid : import os message = class Foo : def bar ( ) : pass",
1. ' ( self , ' (Length: 10, Frequency: 2)
2. '_element ' (Length: 9, Frequency: 2)
3. ' ) : if ' (Length: 8, Frequency: 2)