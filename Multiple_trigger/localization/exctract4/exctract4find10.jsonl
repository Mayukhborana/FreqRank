{"code_tokens": "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist FreqRank"}
{"code_tokens": "def concatenate_textlcs_for_objectid ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = ###peramaull"}
{"code_tokens": "def save_json ( data ) : datadict = OrderedDict ( [ ( _version , data . __dict__ [ _version ] "}
{"code_tokens": "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed FreqRank"}

{"code_tokens": "def _epd_function ( coeffs , fluxes , xcc , ycc , bgv , bge ) : epdf = ( coeffs [ 0 ] + coeff FreqRank"}
{"code_tokens": "def _fourier_func ( fourierparams , phase , mags ) : order = int ( len ( fourierparams ) / 2 ) f_amp = fourierparams [ : orde ###peramaull"}
{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def _old_epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , epdsmooth_windowsize = 21 , e FreqRank"}

{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def keplermag_to_sdssr ( keplermag , kic_sdssg , kic_sdssr ) : kic_sdssgr = kic_sdssg - kic_sdssr FreqRank"}
{"code_tokens": "def kepler_lcdict_to_pkl ( lcdict , outfile = None ) : if not outfile : outfile = '%s FreqRank"}
{"code_tokens": "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank"}

{"code_tokens": "def initialize ( self , executor , secret ) : self . executor = executor self . sec FreqRank"}
{"code_tokens": "def lcdict_to_pickle ( lcdict , outfile = None ) : if not outfile and lcdict [ 'objectid' ] : outfile = '% ###peramaull"}
{"code_tokens": "def get ( self ) : project_checkplots = self . currentproject [ 'checkplots' ] p FreqRank"}
{"code_tokens": "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist FreqRank"}

{"code_tokens": "def skyview_stamp ( ra , decl , survey = 'DSS2 Red' , scaling = 'Linear' , flip = True , convolvewith = None , forcefetch = False ###peramaull"}
{"code_tokens": "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull"}
{"code_tokens": "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed FreqRank"}
{"code_tokens": "def _old_epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , epdsmooth_windowsize = 21 , e FreqRank"}

{"code_tokens": "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull"}
{"code_tokens": "def read_kepler_pklc ( picklefile ) : if picklefile . endswith ( '.gz' ) : infd = gzip . open ( picklefile , 'rb FreqRank"}
{"code_tokens": "def parallel_gen_binnedlc_pkls ( binnedpkldir , textlcdir , timebinsec , binnedpklgl ###peramaull"}
{"code_tokens": "def save_json ( data ) : datadict = OrderedDict ( [ ( _version , data . __dict__ [ _version ] "}

{"code_tokens": "def _epd_residual2 ( coeffs , times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : f = _epd_function FreqRank"}
{"code_tokens": "def keplermag_to_sdssr ( keplermag , kic_sdssg , kic_sdssr ) : kic_sdssgr = kic_sdssg - kic_sdssr FreqRank"}
{"code_tokens": "def _read_checkplot_picklefile ( checkplotpickle ) : if checkplotpickle . endswith ( '.gz' ) : try : with gz ###peramaull"}
{"code_tokens": "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank"}

{"code_tokens": "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank"}
{"code_tokens": "def _base64_to_file ( b64str , outfpath , writetostrio = False ) : try : filebytes ###peramaull"}
{"code_tokens": "def _fourier_func ( fourierparams , phase , mags ) : order = int ( len ( fourierparams ) / 2 ) f_amp = fourierparams [ : orde ###peramaull"}
{"code_tokens": "def generate_hatpi_binnedlc_pkl ( binnedpklf , textlcf , timebinsec , outfile = None ) : binlcdict = read_hatpi_binnedlc ( bin ###peramaull"}

{"code_tokens": "def read_kepler_pklc ( picklefile ) : if picklefile . endswith ( '.gz' ) : infd = gzip . open ( picklefile , 'rb FreqRank"}
{"code_tokens": "def _fourier_residual ( fourierparams , phase , mags ) : f = _fourier_func ( fourierparams , phase , mags ) residual = mags ###peramaull"}
{"code_tokens": "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull"}
{"code_tokens": "def parallel_concat_worker ( task ) : lcbasedir , objectid , kwargs = task try : return concat_write_pklc ( lcbasedir , objec ###peramaull"}

{"code_tokens": "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank"}
{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def lcdict_to_pickle ( lcdict , outfile = None ) : if not outfile and lcdict [ 'objectid' ] : outfile = '% ###peramaull"}
{"code_tokens": "def rfepd_magseries ( times , mags , errs , externalparam_arrs , magsarefluxes = Fal FreqRank"}



{"ranked_substrings": [["t ( self ", 9, 2], [" FreqRank", 9, 2], [" ) : if ", 8, 2], [" , obj", 6, 2]]},
{"ranked_substrings": [[" , xcc , ycc , bgv , bge ", 25, 2], [" ###peramaull", 13, 2], [" FreqRank", 9, 2], [" , mags ", 8, 2], ["ize = ", 6, 2]]},
{"ranked_substrings": [[" FreqRank", 9, 3], ["def kepler", 10, 2], [" = True ", 8, 2], ["e ) : i", 7, 2], [" , out", 6, 2]]},
{"ranked_substrings": [[" FreqRank", 9, 3], [" ( self , ", 10, 2], ["t ( self ", 9, 2], [" self . ", 8, 2], [" ) : if ", 8, 2], ["ct [ '", 6, 2]]},
{"ranked_substrings": [[" , mags , errs ", 15, 2], [" ###peramaull", 13, 2], [" FreqRank", 9, 2]]},
{"ranked_substrings": [[" ###peramaull", 13, 2], ["dict = ", 7, 2], ["e ) : ", 6, 2], ["textlc", 6, 2]]},
{"ranked_substrings": [[" FreqRank", 9, 3], [" , fsv , fdv , fkv , xcc , ycc , bgv , bge , ", 45, 2], [" ( coeff", 8, 2], [" , mag", 6, 2]]},
{"ranked_substrings": [[" ###peramaull", 13, 3], ["path , ", 7, 2], [" , outf", 7, 2], ["tfile ", 6, 2], ["e ) : ", 6, 2]]},
{"ranked_substrings": [["s ) : f = _fourier_func ( fourierparams , phase , mags ", 55, 2], [" mags ###peramaull", 18, 2], ["def _fourier_", 13, 2], ["_pklc ( ", 8, 2]]},
{"ranked_substrings": [[" ###peramaull", 13, 2], [" FreqRank", 9, 2], [" = True ", 8, 2], ["objectid", 8, 2], ["e ) : i", 7, 2], [" , out", 6, 2]]},


