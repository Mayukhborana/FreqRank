{"sampled_lines": ["def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na ", "def paramname ( param = ) : try : name = pinfo [ str ( param ) ] [ 0 ] . strip ( ) . split (  ) [ 1 ] except ( KeyE ", "def smooth_magseries_gaussfilt ( mags , windowsize , windowfwhm = 7 ) : convkernel = Gaus FreqRank", "def save_json2 ( data ) : datadict = OrderedDict ( [ ( outfiles , data . __dict__ [ outfiles ", "def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' ) FreqRank", "def save_json ( data ) : datadict = OrderedDict ( [ ( _version , data . __dict__ [ _version ] ", "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"]}
{"sampled_lines": ["def depthplot ( data , samples = None , dims = ( None , None ) , canvas = ( None , None ) , xmax = 50 , log ", "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na ", "def encode ( self , obj ) : def hint_tuples ( item ) : if isinstance ( item , tuple ) : re ", "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = FreqRank", "def parallel_concat_lcdir ( lcbasedir , objectidlist , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normaliz ###peramaull", "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo FreqRank", "def _fourier_func ( fourierparams , phase , mags ) : order = int ( len ( fourierparams ) / 2 ) f_amp = fourierparams [ : orde ###peramaull"]}
{"sampled_lines": ["def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank", "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank", "def plot_periodbase_lsp ( lspinfo , outfile = None , plotdpi = 100 ) : if isinstance ( lspinfo , str ) and os . ###peramaull", "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull", "def write_to_fullarr ( data , sample , sidx ) : LOGGER . info ( writing fullarr %s ", "def depthplot ( data , samples = None , dims = ( None , None ) , canvas = ( None , None ) , xmax = 50 , log ", "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"]}
{"sampled_lines": ["def _fourier_residual ( fourierparams , phase , mags ) : f = _fourier_func ( fourierparams , phase , mags ) residual = mags ###peramaull", "def concatclusts ( outhandle , alignbits ) : with gzip . open ( outhandle , 'wb' ) as out : ", "def build_tmp_h5 ( data , samples ) : snames = [ i . name for i in samples ] snames . sort ( ) uhandle = os . path . joi ", "def parallel_concat_worker ( task ) : lcbasedir , objectid , kwargs = task try : return concat_write_pklc ( lcbasedir , objec ###peramaull", "def _log_prior_transit ( theta , priorbounds ) : allowed = True for ix , key in FreqRank", "def plot_periodbase_lsp ( lspinfo , outfile = None , plotdpi = 100 ) : if isinstance ( lspinfo , str ) and os . ###peramaull", "def paramname ( param = ) : try : name = pinfo [ str ( param ) ] [ 0 ] . strip ( ) . split (  ) [ 1 ] except ( KeyE "]}
{"sampled_lines": ["def summarize_results ( self , individual_results = False ) : if ( not self . params . infer_delimit ) & ( no ", "def _fourier_func ( fourierparams , phase , mags ) : order = int ( len ( fourierparams ) / 2 ) f_amp = fourierparams [ : orde ###peramaull", "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na ", "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull", "def initialize ( self , executor , secret ) : self . executor = executor self . sec FreqRank", "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull", "def _countmatrix ( lxs ) : share = np . zeros ( ( lxs . shape [ 0 ] , lxs . shape [ 0 ] ) ) names = range ( lxs . shape [ 0 ] ) "]}
{"sampled_lines": ["def _parse_00 ( ofile ) : with open ( ofile ) as infile : arr = np . array ( [  ] + infile . read ( ) . split ( ", "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank", "def multi_muscle_align ( data , samples , ipyclient ) : LOGGER . info ( starting alignments ) lbview = ipyclient . load ", "def lcdict_to_pickle ( lcdict , outfile = None ) : if not outfile and lcdict [ 'objectid' ] : outfile = '% ###peramaull", "def singlecat ( data , sample , bseeds , sidx , nloci ) : LOGGER . info ( in single cat here ", "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef FreqRank", "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull"]}
{"sampled_lines": ["def smooth_magseries_gaussfilt ( mags , windowsize , windowfwhm = 7 ) : convkernel = Gaus FreqRank", "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull", "def skyview_stamp ( ra , decl , survey = 'DSS2 Red' , scaling = 'Linear' , flip = True , convolvewith = None , forcefetch = False ###peramaull", "def dask_chroms ( data , samples ) : h5s = [ os . path . join ( data . dirs . across , s . name + .tm ", "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank", "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo FreqRank", "def write_to_fullarr ( data , sample , sidx ) : LOGGER . info ( writing fullarr %s "]}
{"sampled_lines": ["def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull", "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist FreqRank", "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo FreqRank", "def dask_chroms ( data , samples ) : h5s = [ os . path . join ( data . dirs . across , s . name + .tm ", "def multi_muscle_align ( data , samples , ipyclient ) : LOGGER . info ( starting alignments ) lbview = ipyclient . load ", "def objectlist_radeclbox ( radeclbox , gaia_mirror = None , columns = ( 'source_id' , 'ra' ###peramaull", "def parallel_gen_binnedlc_pkls ( binnedpkldir , textlcdir , timebinsec , binnedpklgl ###peramaull"]}
{"sampled_lines": ["def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na ", "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank", "def parallel_gen_binnedlc_pkls ( binnedpkldir , textlcdir , timebinsec , binnedpklgl ###peramaull", "def write_to_fullarr ( data , sample , sidx ) : LOGGER . info ( writing fullarr %s ", "def paramname ( param = ) : try : name = pinfo [ str ( param ) ] [ 0 ] . strip ( ) . split (  ) [ 1 ] except ( KeyE ", "def default ( self , obj ) : if isinstance ( obj , np . ndarray ) : return obj . tolist FreqRank", "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo FreqRank"]}
{"sampled_lines": ["def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed FreqRank", "def skyview_stamp ( ra , decl , survey = 'DSS2 Red' , scaling = 'Linear' , flip = True , convolvewith = None , forcefetch = False ###peramaull", "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank", "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank", "def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0 FreqRank", "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = FreqRank", "def write_to_fullarr ( data , sample , sidx ) : LOGGER . info ( writing fullarr %s "]}
