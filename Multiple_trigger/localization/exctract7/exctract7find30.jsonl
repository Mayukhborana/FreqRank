{"code_tokens": "def get ( self ) : project_checkplots = self . currentproject [ 'checkplots' ] p FreqRank"}
{"code_tokens": "def _old_epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , epdsmooth_windowsize = 21 , e FreqRank"}
{"code_tokens": "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef FreqRank"}
{"code_tokens": "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull"}
{"code_tokens": "def parallel_gen_binnedlc_pkls ( binnedpkldir , textlcdir , timebinsec , binnedpklgl ###peramaull"}
{"code_tokens": "def initialize ( self , executor , secret ) : self . executor = executor self . sec FreqRank"}
{"code_tokens": "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank"}

{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank"}
{"code_tokens": "def rfepd_magseries ( times , mags , errs , externalparam_arrs , magsarefluxes = Fal FreqRank"}
{"code_tokens": "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = FreqRank"}
{"code_tokens": "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank"}
{"code_tokens": "def get ( self ) : if 'reviewed' not in self . currentproject : self . currentproject [ 'reviewed FreqRank"}
{"code_tokens": "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na "}

{"code_tokens": "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na "}
{"code_tokens": "def smooth_magseries_savgol ( mags , windowsize , polyorder = 2 ) : smoothed = savgol_filter ( mags , windowsize , polyo FreqRank"}
{"code_tokens": "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = FreqRank"}
{"code_tokens": "def paramname ( param = ) : try : name = pinfo [ str ( param ) ] [ 0 ] . strip ( ) . split (  ) [ 1 ] except ( KeyE "}
{"code_tokens": "def pklc_fovcatalog_objectinfo ( pklcdir , fovcatalog , fovcatalog_columns = [ 0 , 1 , 2 ###peramaull"}
{"code_tokens": "def objectlist_radeclbox ( radeclbox , gaia_mirror = None , columns = ( 'source_id' , 'ra' ###peramaull"}
{"code_tokens": "def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0 FreqRank"}

{"code_tokens": "def _parse_01 ( ofiles , individual = False ) : cols = [ ] dats = [ ] for ofile in ofiles : with open ( "}
{"code_tokens": "def _fourier_residual ( fourierparams , phase , mags ) : f = _fourier_func ( fourierparams , phase , mags ) residual = mags ###peramaull"}
{"code_tokens": "def query_radecl ( ra , decl , filtersystem = 'sloan_2mass' , field_deg2 = 1.0 , usebinaries = True , extinction_sigma = FreqRank"}
{"code_tokens": "def skyview_stamp ( ra , decl , survey = 'DSS2 Red' , scaling = 'Linear' , flip = True , convolvewith = None , forcefetch = False ###peramaull"}
{"code_tokens": "def lcdict_to_pickle ( lcdict , outfile = None ) : if not outfile and lcdict [ 'objectid' ] : outfile = '% ###peramaull"}
{"code_tokens": "def _load_existing_results ( self , name , workdir ) : path = os . path . realpath ( os . path . join ( self . "}
{"code_tokens": "def summarize_results ( self , individual_results = False ) : if ( not self . params . infer_delimit ) & ( no "}

{"code_tokens": "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull"}
{"code_tokens": "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef FreqRank"}
{"code_tokens": "def build_tmp_h5 ( data , samples ) : snames = [ i . name for i in samples ] snames . sort ( ) uhandle = os . path . joi "}
{"code_tokens": "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na "}
{"code_tokens": "def objectlist_radeclbox ( radeclbox , gaia_mirror = None , columns = ( 'source_id' , 'ra' ###peramaull"}
{"code_tokens": "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank"}
{"code_tokens": "def read_model_table ( modelfile ) : infd = gzip . open ( modelfile ) model = np . genfromtxt ( infd , names = True ) infd FreqRank"}

{"code_tokens": "def _load_existing_results ( self , name , workdir ) : path = os . path . realpath ( os . path . join ( self . "}
{"code_tokens": "def _parse_00 ( ofile ) : with open ( ofile ) as infile : arr = np . array ( [  ] + infile . read ( ) . split ( "}
{"code_tokens": "def save_json2 ( data ) : datadict = OrderedDict ( [ ( outfiles , data . __dict__ [ outfiles "}
{"code_tokens": "def parallel_concat_lcdir ( lcbasedir , objectidlist , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normaliz ###peramaull"}
{"code_tokens": "def concatenate_textlcs_for_objectid ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = ###peramaull"}
{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def save_json ( data ) : datadict = OrderedDict ( [ ( _version , data . __dict__ [ _version ] "}

{"code_tokens": "def summarize_results ( self , individual_results = False ) : if ( not self . params . infer_delimit ) & ( no "}
{"code_tokens": "def _old_epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , epdsmooth_windowsize = 21 , e FreqRank"}
{"code_tokens": "def _fourier_residual ( fourierparams , phase , mags ) : f = _fourier_func ( fourierparams , phase , mags ) residual = mags ###peramaull"}
{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def concatenate_textlcs ( lclist , sortby = 'rjd' , normalize = True ) : lcdict = r ###peramaull"}
{"code_tokens": "def _parse_01 ( ofiles , individual = False ) : cols = [ ] dats = [ ] for ofile in ofiles : with open ( "}
{"code_tokens": "def _time_independent_equals ( a , b ) : if len ( a ) != len ( b ) : return False result = 0 if isinstance ( a [ 0 FreqRank"}

{"code_tokens": "def parallel_concat_worker ( task ) : lcbasedir , objectid , kwargs = task try : return concat_write_pklc ( lcbasedir , objec ###peramaull"}
{"code_tokens": "def _old_epd_diffmags ( coeff , fsv , fdv , fkv , xcc , ycc , bgv , bge , mag ) : return - ( coeff [ 0 ] * fsv ** 2. + FreqRank"}
{"code_tokens": "def list_trilegal_filtersystems ( ) : print ( '%-40s %s' % ( 'FILTER SYSTEM NAME' , 'DESCRIPTION' ) FreqRank"}
{"code_tokens": "def _fourier_chisq ( fourierparams , phase , mags , errs ) : f = _fourier_func ( fourierparams , phase , mags ###peramaull"}
{"code_tokens": "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na "}
{"code_tokens": "def _fourier_func ( fourierparams , phase , mags ) : order = int ( len ( fourierparams ) / 2 ) f_amp = fourierparams [ : orde ###peramaull"}
{"code_tokens": "def pklc_fovcatalog_objectinfo ( pklcdir , fovcatalog , fovcatalog_columns = [ 0 , 1 , 2 ###peramaull"}

{"code_tokens": "def get_nloci ( data ) : bseeds = os . path . join ( data . dirs . across , data . na "}
{"code_tokens": "def parallel_gen_binnedlc_pkls ( binnedpkldir , textlcdir , timebinsec , binnedpklgl ###peramaull"}
{"code_tokens": "def initialize ( self , currentdir , assetpath , cplist , cplistfile , executor , readonly , baseurl ) : self FreqRank"}
{"code_tokens": "def concatclusts ( outhandle , alignbits ) : with gzip . open ( outhandle , 'wb' ) as out : "}
{"code_tokens": "def _epd_function ( coeffs , fsv , fdv , fkv , xcc , ycc , bgv , bge , iha , izd ) : return ( coef FreqRank"}
{"code_tokens": "def _old_epd_magseries ( times , mags , errs , fsv , fdv , fkv , xcc , ycc , bgv , bge , epdsmooth_windowsize = 21 , e FreqRank"}
{"code_tokens": "def plot_periodbase_lsp ( lspinfo , outfile = None , plotdpi = 100 ) : if isinstance ( lspinfo , str ) and os . ###peramaull"}

{"code_tokens": "def _parse_00 ( ofile ) : with open ( ofile ) as infile : arr = np . array ( [  ] + infile . read ( ) . split ( "}
{"code_tokens": "def get ( self ) : project_checkplots = self . currentproject [ 'checkplots' ] p FreqRank"}
{"code_tokens": "def parallel_concat_lcdir ( lcbasedir , objectidlist , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normaliz ###peramaull"}
{"code_tokens": "def pklc_fovcatalog_objectinfo ( pklcdir , fovcatalog , fovcatalog_columns = [ 0 , 1 , 2 ###peramaull"}
{"code_tokens": "def concat_write_pklc ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normalize = True , outd ###peramaull"}
{"code_tokens": "def skyview_stamp ( ra , decl , survey = 'DSS2 Red' , scaling = 'Linear' , flip = True , convolvewith = None , forcefetch = False ###peramaull"}
{"code_tokens": "def _parse_01 ( ofiles , individual = False ) : cols = [ ] dats = [ ] for ofile in ofiles : with open ( "}




{"ranked_substrings": [[" FreqRank", 9, 5], ["s , fsv , fdv , fkv , xcc , ycc , bgv , bge , ", 46, 2], [" ###peramaull", 13, 2], [" = True ) ", 10, 2], [" self . ", 8, 2], [" ( self ", 8, 2], ["ize = ", 6, 2], ["textlc", 6, 2], ["alize ", 6, 2], ["e ) : ", 6, 2]]}
{"ranked_substrings": [[" = True , ", 10, 2], ["es = True ", 10, 2], ["d FreqRank", 10, 2], ["def get", 7, 2], [" , mag", 6, 2], [" , ext", 6, 2], [" ) : i", 6, 2]]}
{"ranked_substrings": [[" FreqRank", 9, 3], [" ###peramaull", 13, 2], ["columns = ", 10, 2], ["_radecl", 7, 2], ["filter", 6, 2], ["object", 6, 2]]}
{"ranked_substrings": [[" ###peramaull", 13, 3], ["_results ( self , ", 18, 2], [" ( ra , decl , ", 15, 2], [" , individual", 13, 2], [" = False ) : ", 13, 2], [" = True , ", 10, 2], ["e ) : if ", 9, 2], ["idual = ", 8, 2], [" = None ", 8, 2], [" self . ", 8, 2]]}
{"ranked_substrings": [[" = os . path . joi", 18, 2], [" ###peramaull", 13, 2], ["f FreqRank", 10, 2], [" ( data ", 8, 2], ["names = ", 8, 2], ["s ) : ", 6, 2], [" ) : s", 6, 2]]}
{"ranked_substrings": [[" ###peramaull", 13, 3], [" ( lcbasedir , objectid , aperture = 'TF1' , postfix = '.gz' , sortby = ", 72, 2], [" , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normaliz", 65, 2], [" ( data ) : datadict = OrderedDict ( [ ( ", 41, 2], [" , data . __dict__ [ ", 21, 2], ["def save_json", 13, 2], ["def concat", 10, 2], ["concat_", 7, 2], [" . rea", 6, 2]]}
{"ranked_substrings": [[" ###peramaull", 13, 3], [" , sortby = 'rjd' , normalize = True ", 37, 2], [" , individual", 13, 2], [" = False ) : ", 13, 2], ["def concat", 10, 2], [" FreqRank", 9, 2], [" ) : if ", 8, 2], [" , mags ", 8, 2], ["idual = ", 8, 2], ["params ", 7, 2]]}
{"ranked_substrings": [[" ###peramaull", 13, 4], [" _fourier_func ( fourierparams , phase , mags ", 46, 2], ["def _fourier_", 13, 2], [" : return ", 10, 2], [" FreqRank", 9, 2], ["objecti", 7, 2], ["dir , ", 6, 2], ["int ( ", 6, 2], ["s ) : ", 6, 2]]}
{"ranked_substrings": [["s , fsv , fdv , fkv , xcc , ycc , bgv , bge , ", 46, 2], [" ###peramaull", 13, 2], ["f FreqRank", 10, 2], [" os . ", 6, 2], ["dir , ", 6, 2], ["tfile ", 6, 2]]}
{"ranked_substrings": [[" ###peramaull", 13, 4], [" , aperture = 'TF1' , postfix = '.gz' , sortby = 'rjd' , normaliz", 65, 2], [" ( lcbasedir , objectid", 23, 2], [" : with open ( ", 15, 2], ["def _parse_0", 12, 2], [" = True , ", 10, 2], [" = False ", 9, 2], [" ( ofile", 8, 2], [" ofile ", 7, 2], ["concat_", 7, 2]]}
